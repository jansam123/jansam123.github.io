[{"categories":null,"contents":"Vojtova webstránka: ipnp.cz/?page_id=8042\u0026amp;lang=CZ\nPrezentácia Prezentácia a príklady v Jupyter notebooku: prop_chyb.ipynb Príklady Príklady od Vojtecha k propagácii chýb: uncertainty_propagation_examples.py Skript z minulého cvičenia (iba na import plot funkcie): fits_examples.py Odporúčané predmety Základy programovania Použití počítačů ve fyzice NOFY084 - praktické fyzikálne príkady, vhodné na zlepšenie rutiny programovania (v Pythone), KZ za úlohy Programování a zpracování dat v Pythonu NOFY178 - vyššia úroveň programovania v Pythone (triedy, dekorátory,\u0026hellip;), vhodné na zlepšenie dizajnu kódu, KZ za úlohy Strojové učenie (AI) Strojové učení v částicové fyzice NJSF164 - základy hlbokého učenia formou príkladov, vhodné aj pre začiatočnikov strojového učenia, moderné techniky AI, vhodné pre všetkých (nielen časticová fyzika), Zk za úkoly Úvod do strojového učení v Pythonu NPFL129 - strojové učenie, príklady+teória, náročejšie, témy do hĺbky, nie moderné techniky AI (skorej klasické), Zk písomná, Z za úlohy, viac info Hluboké učení NPFL138 - hlboké učenie, príklady+teória, náročné, témy do hĺbky, najmodernejšie techniky AI, Z za úlohy, Zk písomná alebo v prípade splnenia všetkých úloh rovno za 1, viac info Some random link ","date":"December 8, 2024","hero":"/posts/prog_fyz/prop_chyb.png","permalink":"https://samueljankovych.com/posts/prog_fyz/","summary":"\u003cp\u003eVojtova webstránka: \u003ca href=\"https://ipnp.cz/?page_id=8042\u0026amp;lang=CZ\" target=\"_blank\" rel=\"noopener\"\u003eipnp.cz/?page_id=8042\u0026amp;lang=CZ\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"prezentácia\"\u003ePrezentácia\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePrezentácia a príklady v Jupyter notebooku: \u003ca href=\"prop_chyb.ipynb\"\u003eprop_chyb.ipynb\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"príklady\"\u003ePríklady\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePríklady od Vojtecha k propagácii chýb: \u003ca href=\"uncertainty_propagation_examples.py\"\u003euncertainty_propagation_examples.py\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSkript z minulého cvičenia (iba na import plot funkcie): \u003ca href=\"fits_examples.py\"\u003efits_examples.py\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"odporúčané-predmety\"\u003eOdporúčané predmety\u003c/h2\u003e\n\u003ch3 id=\"základy-programovania\"\u003eZáklady programovania\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePoužití počítačů ve fyzice\u003c/strong\u003e \u003ca href=\"https://is.cuni.cz/studium/predmety/index.php?do=predmet\u0026amp;kod=NOFY084\" target=\"_blank\" rel=\"noopener\"\u003eNOFY084\u003c/a\u003e - praktické fyzikálne príkady, vhodné na zlepšenie rutiny programovania (v Pythone), KZ za úlohy\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProgramování a zpracování dat v Pythonu\u003c/strong\u003e \u003ca href=\"https://is.cuni.cz/studium/predmety/index.php?do=predmet\u0026amp;kod=NOFY178\" target=\"_blank\" rel=\"noopener\"\u003eNOFY178\u003c/a\u003e - vyššia úroveň programovania v Pythone (triedy, dekorátory,\u0026hellip;), vhodné na zlepšenie dizajnu kódu, KZ za úlohy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"strojové-učenie-ai\"\u003eStrojové učenie (AI)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStrojové učení v částicové fyzice\u003c/strong\u003e \u003ca href=\"https://is.cuni.cz/studium/predmety/index.php?do=predmet\u0026amp;kod=NJSF164\" target=\"_blank\" rel=\"noopener\"\u003eNJSF164\u003c/a\u003e - základy hlbokého učenia formou príkladov, vhodné aj pre začiatočnikov strojového učenia, moderné techniky AI, vhodné pre všetkých (nielen časticová fyzika), Zk za úkoly\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eÚvod do strojového učení v Pythonu\u003c/strong\u003e \u003ca href=\"https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet\u0026amp;kod=NPFL129\" target=\"_blank\" rel=\"noopener\"\u003eNPFL129\u003c/a\u003e - strojové učenie, príklady+teória, náročejšie, témy do hĺbky, nie moderné techniky AI (skorej klasické), Zk písomná, Z za úlohy, \u003ca href=\"https://ufal.mff.cuni.cz/courses/npfl129/2425-winter\" target=\"_blank\" rel=\"noopener\"\u003eviac info\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHluboké učení\u003c/strong\u003e \u003ca href=\"https://is.cuni.cz/studium/eng/predmety/index.php?do=predmet\u0026amp;kod=NPFL138\" target=\"_blank\" rel=\"noopener\"\u003eNPFL138\u003c/a\u003e - hlboké učenie, príklady+teória, náročné, témy do hĺbky, najmodernejšie techniky AI, Z za úlohy, Zk písomná alebo v prípade splnenia všetkých úloh rovno za 1, \u003ca href=\"https://ufal.mff.cuni.cz/courses/npfl138/2324-summer\" target=\"_blank\" rel=\"noopener\"\u003eviac info\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"some-random-linkhttpscernboxcernchswiebtviikkf6uke\"\u003e\u003ca href=\"https://cernbox.cern.ch/s/WIEBTViIkkf6UkE\" target=\"_blank\" rel=\"noopener\"\u003eSome random link\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/posts/prog_fyz/meme.jpg\" alt=\"Meme\"\u003e\u003c/p\u003e","tags":null,"title":"Programovanie pre fyzikov"},{"categories":null,"contents":"Prerequisites Get a CERN login. Generate a Kerberos authentication ticket using the command and type your password when prompted: kinit Check if the ticket is generated using:\nklist klist -f Create a fork of the Athena repository. THE PROJECT NAME MUST BE AS THE ORIGINAL: athena. Setup a working environment ssh to lxplus or other CERN machine. Setup the environment: setupATLAS lsetup git Setup the git-atlas (change sjankovy to your username): git atlas init-config sjankovy --apply Check if the configuration is correct with git atlas init-config.\nCreate your own working area: mkdir WorkingArea cd WorkingArea Get the parts of repository you need. For example, if you want to work with BoostedJetTaggers, JetMomentTools, JetRecConfig and DerivationFramework: git atlas init-workdir https://:@gitlab.cern.ch:8443/atlas/athena.git -p BoostedJetTaggers JetMomentTools JetRecConfig DerivationFrameworkPhys DerivationFrameworkJetEtMiss Build the code: mkdir build cd build asetup Athena,main,latest cmake ../athena/Projects/WorkDir/ make If you wish to restore the working environment, use: cd build/ setupATLAS asetup --restore source x86*/setup.sh cd ../run/ If you change something in the athena code, you need to recompile it. You can do it by running:\ncd build/ make Run the derivation code: Derivation_tf.py --CA --inputAODFile ../data/mc20_13TeV.364704.Pythia8EvtGen_A14NNPDF23LO_jetjet_JZ4WithSW.recon.AOD.e7142_s3681_r13144.AOD.27464218._000535.pool.root.1 --outputDAODFile output.pool.root --formats JETM2 --maxEvents 10 ","date":"September 18, 2022","hero":"/posts/athena/ATLAS_logo.png","permalink":"https://samueljankovych.com/posts/athena/","summary":"\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eGet a CERN login.\u003c/li\u003e\n\u003cli\u003eGenerate a \u003ca href=\"https://linux.web.cern.ch/docs/kerberos-access/\" target=\"_blank\" rel=\"noopener\"\u003eKerberos\u003c/a\u003e authentication ticket using the command and type your password when prompted:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekinit\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCheck if the ticket is generated using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eklist\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eklist -f\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eCreate a fork of the \u003ca href=\"https://gitlab.cern.ch/atlas/athena\" target=\"_blank\" rel=\"noopener\"\u003eAthena repository\u003c/a\u003e. THE PROJECT NAME MUST BE AS THE ORIGINAL: \u003ccode\u003eathena\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"setup-a-working-environment\"\u003eSetup a working environment\u003c/h2\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003essh to lxplus or other CERN machine.\u003c/li\u003e\n\u003cli\u003eSetup the environment:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esetupATLAS \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elsetup git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"6\"\u003e\n\u003cli\u003eSetup the git-atlas (change \u003ccode\u003esjankovy\u003c/code\u003e to your username):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit atlas init-config sjankovy --apply\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCheck if the configuration is correct with \u003ccode\u003egit atlas init-config\u003c/code\u003e.\u003c/p\u003e","tags":null,"title":"Running Athena"},{"categories":null,"contents":"Prerequisites Get a CAS login. Login to gpulab using CAS login, follow this guide. Charliecloud image Log into a gpu node srun -p gpu-ffa --gpus=1 --time=5:00:00 --pty bash Pull nvidia docker image with Charliecloud ch-image pull tensorflow/tensorflow:latest-gpu Convert the docker image to charliecloud image expressed as a directory ./my-tf ch-convert -i ch-image -o dir tensorflow/tensorflow:latest-gpu ./my-tf Import CUDA libraries ch-fromhost --nvidia ./my-tf Launch the container ch-run -w -c /home/jankovys --bind=/home/jankovys -u 0 -g 0 ./my-tf -- bash The command above will launch the container with working directory /home/jankovys and write access to the container (-w). The --bind=/home/jankovys option will bind the /home/jankovys directory on the host to the /home/jankovys directory in the container. The -u 0 -g 0 options will run the container as root user. The -- at the end of the command tells ch-run that the command to run in the container follows.\nVerify the GPU support nvidia-smi Tensorflow If you want to install tensorflow, it must be the same version as tensorflowe in the charliecloud image. 16. Upgrade pip\npip install --upgrade pip create a virtual environment python -m venv venv source venv/bin/activate Install tensorflow pip install tensorflow Verify the installation and GPU support python -c \u0026#34;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\u0026#34; You should see something like this: tf.Tensor(0.0, shape=(), dtype=float32) Verify GPU support python -c \u0026#34;import tensorflow as tf; print(tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;))\u0026#34; You should see something like this: [PhysicalDevice(name=\u0026#39;/physical_device:GPU:0\u0026#39;, device_type=\u0026#39;GPU\u0026#39;)] Running scripts To run a python script runMe.py create a file runMe.sh with the following content:\n#!/bin/bash #SBATCH --partition=gpu-ffa # partition you want to run job in #SBATCH --gpus=1 # number of GPUs #SBATCH --mem=16G # CPU memory resource #SBATCH --time=12:00:00\t# time limit #SBATCH --cpus-per-task=8 # cpus per tasks #SBATCH --job-name=\u0026#34;run_conda\u0026#34; # change to your job name #SBATCH --output=/home/jankovys/JIDENN/out/%x.%A.%a.log # output file ch-run -w --bind=/home/jankovys -c /home/jankovys/JIDENN /home/jankovys/my-tf -- bash_scripts/runner_inside.sh and a file runner_inside.sh with the following content:\n#!/bin/bash venv/bin/python runMe.py To import the CUDA libraries, you need start the sbatch job from a working node:\nsrun -p gpu-ffa --gpus=1 --pty bash sbatch runMe.sh The runMe.sh script will automatically log onto a working node with selected resources, launch the container, and run the runner_inside.sh script. The runner_inside.sh script will activate the virtual environment and run the runMe.py script with CUDA support.\nTo run the script in a interactive session, run the following command:\nsrun -p gpu-ffa --gpus=1 --time=5:00:00 --pty bash ch-run -w -c /home/jankovys --bind=/home/jankovys -u 0 -g 0 ./my-tf -- bash source venv/bin/activate python runMe.py Troubleshooting Could not load library libcudnn_cnn_infer.so.8. Error: libcuda.so: cannot open shared object file: No such file or directory error When using CNN in TF you might get the following error:\nCould not load library libcudnn_cnn_infer.so.8. Error: libcuda.so: cannot open shared object file: No such file or directory To fix this create a link inside your charliecloud image:\nln -s /usr/local/cuda/targets/x86_64-linux/lib/libcuda.so.1 /usr/local/cuda/targets/x86_64-linux/lib/libcuda.so ","date":"September 18, 2022","hero":"/posts/gpulab/nvidia_smi.jpg","permalink":"https://samueljankovych.com/posts/gpulab/","summary":"\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eGet a CAS login.\u003c/li\u003e\n\u003cli\u003eLogin to gpulab using CAS login, follow this \u003ca href=\"https://gitlab.mff.cuni.cz/mff/hpc/clusters#installed-software-on-clusters\" target=\"_blank\" rel=\"noopener\"\u003eguide\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"charliecloud-image\"\u003eCharliecloud image\u003c/h2\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eLog into a gpu node\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esrun -p gpu-ffa --gpus\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e --time\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e5:00:00 --pty bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003ePull nvidia docker image with Charliecloud\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ech-image pull tensorflow/tensorflow:latest-gpu\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eConvert the docker image to charliecloud image expressed as a directory \u003ccode\u003e./my-tf\u003c/code\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ech-convert -i ch-image -o dir tensorflow/tensorflow:latest-gpu ./my-tf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eImport CUDA libraries\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ech-fromhost --nvidia ./my-tf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eLaunch the container\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e ch-run -w -c /home/jankovys --bind\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/home/jankovys -u \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e -g \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ./my-tf -- bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe command above will launch the container with working directory \u003ccode\u003e/home/jankovys\u003c/code\u003e and write access to the container (\u003ccode\u003e-w\u003c/code\u003e). The \u003ccode\u003e--bind=/home/jankovys\u003c/code\u003e option will bind the \u003ccode\u003e/home/jankovys\u003c/code\u003e directory on the host to the \u003ccode\u003e/home/jankovys\u003c/code\u003e directory in the container. The \u003ccode\u003e-u 0 -g 0\u003c/code\u003e options will run the container as root user. The \u003ccode\u003e--\u003c/code\u003e at the end of the command tells ch-run that the command to run in the container follows.\u003c/p\u003e","tags":null,"title":"Setup MFF UK GPULab"},{"categories":null,"contents":"Set up Install Docker Pull the ROOT (rootproject/root:6.26.06-ubuntu22.04) docker image: docker pull rootproject/root:6.26.06-ubuntu22.04 Run the docker image: docker run -p 9200:9200 --rm -d -it -v ~/host/dir:/container/dir --name TBrowser rootproject/root:6.26.06-ubuntu22.04 root -l --web=server:9200 /opt/root/tutorials/v7/browser.cxx -p 9200:9200 maps the port 9200 of the host to the port 9200 of the container --rm removes the container after it exits -d runs the container in the background -it runs the container in interactive mode -v ~/host/dir:/container/dir mounts the host directory ~/host/dir to the container directory /container/dir --name TBrowser names the container TBrowser rootproject/root:latest is the docker image root -l --web=server:9200 /opt/root/tutorials/v7/browser.cxx runs the ROOT TBrowser in the container Open a web browser and go to localhost:9200/win1 to see the TBrowser: To stop the container, run: docker stop TBrowser ","date":"September 18, 2022","hero":"/posts/tbrowser/TBrowser_screenshot.jpg","permalink":"https://samueljankovych.com/posts/tbrowser/","summary":"\u003ch2 id=\"set-up\"\u003eSet up\u003c/h2\u003e\n\u003col start=\"0\"\u003e\n\u003cli\u003eInstall \u003ca href=\"https://docs.docker.com/get-docker/\" target=\"_blank\" rel=\"noopener\"\u003eDocker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePull the \u003ca href=\"https://hub.docker.com/r/rootproject/root\" target=\"_blank\" rel=\"noopener\"\u003eROOT\u003c/a\u003e (rootproject/root:6.26.06-ubuntu22.04) docker image:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker pull rootproject/root:6.26.06-ubuntu22.04\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003eRun the docker image:\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run -p 9200:9200 --rm -d -it -v ~/host/dir:/container/dir --name TBrowser rootproject/root:6.26.06-ubuntu22.04 root -l --web\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eserver:9200 /opt/root/tutorials/v7/browser.cxx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-p 9200:9200\u003c/code\u003e maps the port 9200 of the host to the port 9200 of the container\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--rm\u003c/code\u003e removes the container after it exits\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-d\u003c/code\u003e runs the container in the background\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-it\u003c/code\u003e runs the container in interactive mode\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-v ~/host/dir:/container/dir\u003c/code\u003e mounts the host directory \u003ccode\u003e~/host/dir\u003c/code\u003e to the container directory \u003ccode\u003e/container/dir\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--name TBrowser\u003c/code\u003e names the container \u003ccode\u003eTBrowser\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erootproject/root:latest\u003c/code\u003e is the docker image\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eroot -l --web=server:9200 /opt/root/tutorials/v7/browser.cxx\u003c/code\u003e runs the ROOT TBrowser in the container\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOpen a web browser and go to \u003ca href=\"https://localhost:9200/win1\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003elocalhost:9200/win1\u003c/code\u003e\u003c/a\u003e to see the TBrowser:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"/posts/tbrowser/TBrowser_screenshot.jpg\" alt=\"TBrowser screenshot\"\u003e\u003c/p\u003e","tags":null,"title":"TBrowser in docker container"},{"categories":null,"contents":"Tips and Tricks Git+latexdiff Generate a latexdiff between two commits\ngit latexdiff 0db4b84289f7554810cfdaacf7bafdbab23466b2 -- --main ANA-JETM-2023-07-PUB.tex ","date":"September 18, 2022","hero":"/images/default-hero.jpg","permalink":"https://samueljankovych.com/posts/tips_and_tricks/","summary":"\u003ch1 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h1\u003e\n\u003ch2 id=\"gitlatexdiffhttpstwikicernchtwikibinviewauthatlasprotectedpubcomlatexdiffgit_latexdiff_command\"\u003e\u003ca href=\"https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/PubComLaTeXDiff#git_latexdiff_command\" target=\"_blank\" rel=\"noopener\"\u003eGit+latexdiff\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGenerate a latexdiff between two commits\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit latexdiff 0db4b84289f7554810cfdaacf7bafdbab23466b2 -- --main ANA-JETM-2023-07-PUB.tex\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","tags":null,"title":"Tips and Tricks"},{"categories":null,"contents":"Arch Linux Installation Download the ISO image Download the latest Arch Linux ISO from here.\nCreate empty disk image Create the empty file with filled zeros of size 64GB:\ndd if=/dev/zero of=bios.img bs=2G count=32 Boot the ISO image Make sure to have the OVMF package installed:\npacman -S ovmf This package contains the UEFI firmware for QEMU. Copy the UEFI firmware to the current directory:\ncp /usr/share/edk2/x64/OVMF_VARS.fd . Boot the ISO image with QEMU:\nqemu-system-x86_64 \\ -enable-kvm \\ -drive file=bios.img,format=raw \\ -cdrom /usr/share/nswi106/archlinux-2023.09.01-x86_64.iso \\ -drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd \\ -drive if=pflash,format=raw,file=OVMF_VARS.fd \\ -m 2G \\ -cpu host \\ -smp 2 \\ -vnc :4232 Prepare the disk See available disks:\nlsblk Partition the disk:\nfdisk /dev/sda Than enter these commands inside the fdisk:\ng to create a new GPT partition table n to create a new partition Enter to select the default partition number Enter to select the default first sector +512M to create 512MB partition t to change the partition type 1 to select the first partition, if only one partition was created, it will be selected by default 1 to select EFI System partition type n to create a new partition Enter to select the default partition number Enter to select the default first sector Enter to select the default last sector w to write the changes to the disk Check with lsblk that the partitions were created correctly. Create a filesystem on the partitions:\nmkfs.fat -F32 /dev/sda1 mkfs.btrfs /dev/sda2 You can check the filesystems with lsblk -f. Mount the filesystems:\nmount /dev/sda2 /mnt mount --mkdir /dev/sda1 /mnt/boot Install the base system Install the essential packages:\npacstrap -K /mnt base linux linux-firmware Generate the fstab file:\ngenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Change root to the newly installed system Chaneg root into the new system:\narch-chroot /mnt Time zone, localization, hostname and root password (optional) Set the time zone:\nln -sf /usr/share/zoneinfo/Europe/Prague /etc/localtime hwclock --systohc Install the vim editor:\npacman -S vim Uncomment the en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen, then generate them with:\nlocale-gen Create the /etc/locale.conf file and set the LANG variable:\necho \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf Set the hostname:\necho \u0026#34;arch\u0026#34; \u0026gt; /etc/hostname Set the root password:\npasswd Time synchronization Use the timedatectl command to ensure the system clock is accurate:\ntimedatectl set-ntp true Bootloader Install the grub bootloader:\npacman -S grub efibootmgr Install the bootloader:\ngrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub Generate the grub configuration file:\ngrub-mkconfig -o /boot/grub/grub.cfg Exit the chroot environment and QEMU.\nStart the new system Start the QEMU with the new system:\nqemu-system-x86_64 \\ -enable-kvm \\ -drive file=bios.img,format=raw \\ -drive if=pflash,format=raw,readonly=on,file=/usr/share/edk2-ovmf/x64/OVMF_CODE.fd \\ -drive if=pflash,format=raw,file=OVMF_VARS.fd \\ -m 2G \\ -cpu host \\ -smp 2 \\ -vnc :4232 Network Setup In the further we assume that we have a machine a which has htwo VMs running ns1 and gw and we want to connect them to the internet, such that ns1 can access the internet through gw.\nVDE Switch Create a vde_switch network:\n/usr/bin/vde_switch -sock /home/jankovys/vde/sw1/comm -daemon Or create a service that will start the vde_switch automatically. Create a file /etc/systemd/system/sw1.service or ~/.config/systemd/user/sw1.service with the following content:\n[Unit] Description=Vde Switch After=network.target [Service] ExecStart=/usr/bin/vde_switch -sock /home/jankovys/vde/sw1/comm -daemon Type=forking Restart=always RestartSec=1 [Install] WantedBy=default.target Then enable and start the service:\nsystemctl --user enable --now sw1.service VMs setup ns1 Connect the VM to the vde_switch network with option\n-nic vde,mac=de:ad:be:ef:20:03,sock=\u0026#34;$HOME/vde/sw1/comm\u0026#34; Create a network interface on the ns1 by creating a file /etc/systemd/network/ens3.network with the following content:\n[Match] Name=ens3 [Network] Address=10.0.42.2/24 Gateway=10.0.42.1 DNS=8.8.8.8 Then enable and start the service:\nsystemctl enable --now systemd-networkd You can check the network configuration with:\nip addr show ip route show Add a nameserver to /etc/resolv.conf:\necho \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt; /etc/resolv.conf gw Connect the VM to the vde_switch network and external network with options\n-nic vde,mac=de:ad:be:ef:20:01,sock=/var/run/vde/backbone/comm \\ -nic vde,mac=de:ad:be:ef:20:02,sock=\u0026#34;$HOME/vde/sw1/comm\u0026#34; \\ Create a ens3 network interface connecetd to the external internet on the gw by creating a file /etc/systemd/network/ens3.network with the following content:\n[Match] Name=ens3 [Network] Address=10.0.0.42/24 Gateway=10.0.0.1 DNS=10.0.0.1 Additionaly create a ens4 network interface connected to the vde_switch network by creating a file /etc/systemd/network/ens4.network with the following content:\n[Match] Name=ens4 [Network] Address=10.0.42.1/24 Then enable and start the service:\nsystemctl enable --now systemd-networkd Add a nameserver to /etc/resolv.conf:\necho \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt; /etc/resolv.conf Setp up masquerading Add the IPMasquerade=yes line to /etc/systemd/network/ens4.network and /etc/systemd/network/ens5.network on the gw to enable fowarding and masquerading of the traffic from ens4 and ens5 to the Internet:\n[Match] Name=ens4 [Network] Address=10.0.42.1/24 IPMasquerade=yes [Match] Name=ens5 [Network] Address=10.0.142.1/24 IPMasquerade=yes Then restart the systemd-networkd service:\nsystemctl restart systemd-networkd VM base setup Create users:\nuseradd -m jankovys useradd -m eval Change the password for the users:\npasswd jankovys passwd eval Install the sudo package:\npacman -S sudo Add the users to be able to use sudo without password by editing the /etc/sudoers file\npacman -S vi visudo and adding the following lines:\n## User privilege specification jankovys ALL=(ALL) ALL eval ALL=(ALL) ALL ## Defaults:jankovys !authenticate Defaults:evel !authenticate Install the openssh package:\npacman -S openssh Enable the sshd service:\nsystemctl enable --now sshd Add the puclib key to the .ssh/authorized_keys file:\nssh-ed25519 ..... Disable passwrd authentication by editing the /etc/ssh/sshd_config file and setting the following options:\nPasswordAuthentication no # ChallengeResponseAuthentication no Restart the sshd service:\nsystemctl restart sshd Snapper setup Setp up cronie Install cronie package:\npacman -S cronie Enable and start the cronie service:\nsystemctl enable --now cronie The cron jobs can be edited by\ncrontab -e and the list of the jobs can be displayed by\ncrontab -l Setup snapper Snapper is a tool for creating snapshots of the filesystem. Install the snapper package:\npacman -S snapper Generate the default configuration:\nsnapper -c root create-config / This will create a configuration file /etc/snapper/configs/root, which you can edit to your needs.\nExpand to see the config file # subvolume to snapshot SUBVOLUME=\u0026#34;/\u0026#34; # filesystem type FSTYPE=\u0026#34;btrfs\u0026#34; # btrfs qgroup for space aware cleanup algorithms QGROUP=\u0026#34;\u0026#34; # fraction or absolute size of the filesystems space the snapshots may use SPACE_LIMIT=\u0026#34;0.5\u0026#34; # fraction or absolute size of the filesystems space that should be free FREE_LIMIT=\u0026#34;0.2\u0026#34; # users and groups allowed to work with config ALLOW_USERS=\u0026#34;\u0026#34; ALLOW_GROUPS=\u0026#34;\u0026#34; # sync users and groups from ALLOW_USERS and ALLOW_GROUPS to .snapshots # directory SYNC_ACL=\u0026#34;no\u0026#34; # start comparing pre- and post-snapshot in background after creating # post-snapshot BACKGROUND_COMPARISON=\u0026#34;yes\u0026#34; # run daily number cleanup NUMBER_CLEANUP=\u0026#34;yes\u0026#34; # limit for number cleanup NUMBER_MIN_AGE=\u0026#34;1800\u0026#34; NUMBER_LIMIT=\u0026#34;30\u0026#34; NUMBER_LIMIT_IMPORTANT=\u0026#34;30\u0026#34; # create hourly snapshots TIMELINE_CREATE=\u0026#34;yes\u0026#34; # cleanup hourly snapshots after some time TIMELINE_CLEANUP=\u0026#34;yes\u0026#34; # limits for timeline cleanup TIMELINE_MIN_AGE=\u0026#34;1800\u0026#34; TIMELINE_LIMIT_HOURLY=\u0026#34;20\u0026#34; TIMELINE_LIMIT_DAILY=\u0026#34;20\u0026#34; TIMELINE_LIMIT_WEEKLY=\u0026#34;1\u0026#34; TIMELINE_LIMIT_MONTHLY=\u0026#34;0\u0026#34; TIMELINE_LIMIT_YEARLY=\u0026#34;0\u0026#34; # cleanup empty pre-post-pairs EMPTY_PRE_POST_CLEANUP=\u0026#34;yes\u0026#34; # limits for empty pre-post-pair cleanup EMPTY_PRE_POST_MIN_AGE=\u0026#34;1800\u0026#34; Firewall setup Install nftables package:\npacman -S nftables Edit the /etc/nftables.conf file to your needs:\nDrop input and forward hooks Allow all outbound and forwarded traffic Allow established and related traffic Allow SSH traffic Allow ICMP traffic Allow localhost (loopback) traffic Expand to see the config file #!/usr/sbin/nft -f flush ruleset table inet filter { chain input { type filter hook input priority filter; policy drop; ct state invalid drop comment \u0026#34;early drop of invalid connections\u0026#34; ct state { established, related } accept comment \u0026#34;allow tracked connections\u0026#34; iifname \u0026#34;lo\u0026#34; accept comment \u0026#34;allow from loopback\u0026#34; ip protocol icmp accept comment \u0026#34;allow icmp\u0026#34; meta l4proto ipv6-icmp accept comment \u0026#34;allow icmp v6\u0026#34; tcp dport 22 accept comment \u0026#34;allow sshd\u0026#34; } chain forward { type filter hook forward priority filter; policy drop; ct state { established, related } accept } } Load the configuration:\nnft -f /etc/nftables.conf The configuration can be tested with:\nnft list ruleset Enable and start the nftables service:\nsystemctl enable --now nftables BIRD Install the bird package:\npacman -S bird Edit the /etc/bird.conf file to your needs to configure the BGP protocol:\nSet the router ID Enable the device protocol Import and expoart all routes from the direct protocol and kernel protocol Setup the BGP protocol Expand to see the config file log syslog all; router id 10.0.0.42; protocol device { } protocol direct { ipv4;\t# Connect to default IPv4 table ipv6;\t# ... and to default IPv6 table } protocol kernel { ipv4 {\timport all;\t# Import to table, default is import all export all;\t# Export to protocol. default is export none }; } # Another instance for IPv6, skipping default options protocol kernel { ipv6 { export all; }; } protocol static { ipv4;\t# Again, IPv4 channel with default options } protocol bgp { local 10.0.0.42 as 65042; # Local AS number neighbor 10.0.0.1 as 65001; # Remote AS number multihop; # Allow multihop connections ipv4 { export all; # Export all routes to the neighbor import all; # Import all routes from the neighbor next hop self; # Use local address as nexthop for all routes }; }; Enable and start the bird service:\nsystemctl enable --now bird The routing table can be displayed with:\nbirdc show route Or more verbosely with:\nbirdc show route all To view all protocols use:\nsudo birdc show protocols ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://samueljankovych.com/posts/arch_linux/","summary":"\u003ch1 id=\"arch-linux-installationhttpswikiarchlinuxorgtitleinstallation_guide\"\u003e\u003ca href=\"https://wiki.archlinux.org/title/installation_guide\" target=\"_blank\" rel=\"noopener\"\u003eArch Linux Installation\u003c/a\u003e\u003c/h1\u003e\n\u003ch2 id=\"download-the-iso-image\"\u003eDownload the ISO image\u003c/h2\u003e\n\u003cp\u003eDownload the latest Arch Linux ISO from \u003ca href=\"https://archlinux.org/download/\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"create-empty-disk-image\"\u003eCreate empty disk image\u003c/h2\u003e\n\u003cp\u003eCreate the empty file with filled zeros of size 64GB:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edd \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/dev/zero of\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebios.img bs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e2G count\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"boot-the-iso-imagehttpswikiarchlinuxorgtitleqemubooting_in_uefi_mode\"\u003e\u003ca href=\"https://wiki.archlinux.org/title/QEMU#Booting_in_UEFI_mode\" target=\"_blank\" rel=\"noopener\"\u003eBoot the ISO image\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMake sure to have the \u003ccode\u003eOVMF\u003c/code\u003e package installed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epacman -S ovmf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis package contains the UEFI firmware for QEMU.\nCopy the UEFI firmware to the current directory:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecp /usr/share/edk2/x64/OVMF_VARS.fd .\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBoot the ISO image with QEMU:\u003c/p\u003e","tags":null,"title":""}]